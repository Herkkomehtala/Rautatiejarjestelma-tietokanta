{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rautatiej\u00e4rjestelm\u00e4n tietokantaprojekti Hei! Olen Herkko Meht\u00e4l\u00e4 ja t\u00e4lt\u00e4 sivustolta l\u00f6yt\u00e4t tekem\u00e4ni harjoitusty\u00f6n tietokantojen kurssille. Aiheen nimi: Rautatiej\u00e4rjestelm\u00e4n tietokanta Tekij\u00e4: Herkko Meht\u00e4l\u00e4 Opintojakso: Tietokannat TTC2020 Repositorio T\u00e4m\u00e4n sivuston repositorion l\u00f6yd\u00e4t t\u00e4\u00e4lt\u00e4.","title":"Rautatiej\u00e4rjestelm\u00e4n tietokantaprojekti"},{"location":"#rautatiejarjestelman-tietokantaprojekti","text":"Hei! Olen Herkko Meht\u00e4l\u00e4 ja t\u00e4lt\u00e4 sivustolta l\u00f6yt\u00e4t tekem\u00e4ni harjoitusty\u00f6n tietokantojen kurssille. Aiheen nimi: Rautatiej\u00e4rjestelm\u00e4n tietokanta Tekij\u00e4: Herkko Meht\u00e4l\u00e4 Opintojakso: Tietokannat TTC2020","title":"Rautatiej\u00e4rjestelm\u00e4n tietokantaprojekti"},{"location":"#repositorio","text":"T\u00e4m\u00e4n sivuston repositorion l\u00f6yd\u00e4t t\u00e4\u00e4lt\u00e4.","title":"Repositorio"},{"location":"Datan-lis%C3%A4%C3%A4minen/","text":"Company INSERT INTO company (CompanyID, Name, CEO) VALUES (1, 'Rogersound', 'Joel Sallinen'), (2, 'Dun Rite', 'Ismo Laitela'), (3, 'Asian Fusion', 'Severi Huovinen'), (4, 'VR', 'Kaarina Luusua'); +-----------+--------------+-----------------+ | CompanyID | Name | CEO | +-----------+--------------+-----------------+ | 1 | Rogersound | Joel Sallinen | | 2 | Dun Rite | Ismo Laitela | | 3 | Asian Fusion | Severi Huovinen | | 4 | VR | Kaarina Luusua | +-----------+--------------+-----------------+ TRAIN INSERT INTO TRAIN (TrainID, Manufacturer, SeatAmount, Horsepower, Company_CompanyID) VALUES (1, 'Robinson INC', 300, 5000, 1), (2, 'Irving Trains', 250, 4500, 2), (3, 'Greyvoid', 500, 7350, 4), (4, 'La Petite Boulangerie', 550, 5600, 1), (5, 'Robinson INC', 10, 7300, 3); +---------+-----------------------+------------+------------+-------------------+ | TrainID | Manufacturer | SeatAmount | Horsepower | Company_CompanyID | +---------+-----------------------+------------+------------+-------------------+ | 1 | Robinson INC | 300 | 5000 | 1 | | 2 | Irving Trains | 250 | 4500 | 2 | | 3 | Greyvoid | 500 | 7350 | 4 | | 4 | La Petite Boulangerie | 550 | 5600 | 1 | | 5 | Robinson INC | 10 | 7300 | 3 | +---------+-----------------------+------------+------------+-------------------+ MAINTENANCEREPORT INSERT INTO maintenancereport (MaintenanceID, Date, Type, Status, Other, Train_TrainID) VALUES (1, '2017-10-15', 'Engine', 'Good', NULL, 1), (2, '2020-06-21', 'Bathroom', 'Faulty', \"Toilets didn't work\", 2), (3, '2019-01-02', 'Brakes', 'Good', NULL, 1), (4, '2020-12-02', 'Radio transceiver', 'Good', NULL, 3); +---------------+------------+-------------------+--------+---------------------+---------------+ | MaintenanceID | Date | Type | Status | Other | Train_TrainID | +---------------+------------+-------------------+--------+---------------------+---------------+ | 1 | 2017-10-15 | Engine | Good | NULL | 1 | | 2 | 2020-06-21 | Bathroom | Faulty | Toilets didn't work | 2 | | 3 | 2019-01-02 | Brakes | Good | NULL | 1 | | 4 | 2020-12-02 | Radio transceiver | Good | NULL | 3 | +---------------+------------+-------------------+--------+---------------------+---------------+ TRIP INSERT INTO trip (TripID, DepartingStation, ArrivalStation, EstimatedTime, TotalDistance, Train_TrainID) VALUES (1, 'Pasila', 'Oulu', '08:25:00', 850, 1), (2, 'Rovaniemi', 'Oulu', '01:12:00', 170, 2), (3, 'Ylivieska', 'Kauhava', '01:35:00', 145, 1), (4, 'Mikkeli', 'Tampere', '01:45:00', 250, 3), (5, 'Tampere', 'Alavieska', '04:10:00', 450, 4), (6, 'Kauhava', 'Helsinki', '06:11:00', 610, 5); +--------+------------------+----------------+---------------+---------------+---------------+ | TripID | DepartingStation | ArrivalStation | EstimatedTime | TotalDistance | Train_TrainID | +--------+------------------+----------------+---------------+---------------+---------------+ | 1 | Pasila | Oulu | 08:25:00 | 850 | 1 | | 2 | Rovaniemi | Oulu | 01:12:00 | 170 | 2 | | 3 | Ylivieska | Kauhava | 01:35:00 | 145 | 1 | | 4 | Mikkeli | Tampere | 01:45:00 | 250 | 3 | | 5 | Tampere | Alavieska | 04:10:00 | 450 | 4 | | 6 | Kauhava | Helsinki | 06:11:00 | 610 | 5 | +--------+------------------+----------------+---------------+---------------+---------------+ PERSON INSERT INTO person (PersonID, Firstname, Lastname, Birthday, TYPE, Gender) VALUES (1, 'Salla', 'Holappa', '1978-11-12', 'Customer', 'F'), (2, 'Tuukka', 'Tallus', '1991-02-02', 'Customer', 'M'), (3, 'Sanna', 'Inberg', '1949-10-05', 'Customer', 'F'), (4, 'Tapani', 'Lindman', '1984-09-08', 'Customer', 'M'), (5, 'Retu', 'Rantala', '1997-12-27', 'Customer', 'M'), (6, 'Armas', 'Hanhi', '1989-01-21', 'Customer', 'M'), (7, 'Kaari', 'Kulju', '1985-07-12', 'Staff', 'O'), (8, 'Helvi', 'Tukio', '1984-03-28', 'Staff', 'F'), (9, 'Petteri', 'Ketola', '1992-08-15', 'Staff', 'M'); +----------+-----------+----------+------------+----------+--------+ | PersonID | Firstname | Lastname | Birthday | TYPE | Gender | +----------+-----------+----------+------------+----------+--------+ | 1 | Salla | Holappa | 1978-11-12 | Customer | F | | 2 | Tuukka | Tallus | 1991-02-02 | Customer | M | | 3 | Sanna | Inberg | 1949-10-05 | Customer | F | | 4 | Tapani | Lindman | 1984-09-08 | Customer | M | | 5 | Retu | Rantala | 1997-12-27 | Customer | M | | 6 | Armas | Hanhi | 1989-01-21 | Customer | M | | 7 | Kaari | Kulju | 1985-07-12 | Staff | O | | 8 | Helvi | Tukio | 1984-03-28 | Staff | F | | 9 | Petteri | Ketola | 1992-08-15 | Staff | M | +----------+-----------+----------+------------+----------+--------+ RECEIPT INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES (1, '1-23', 40, 1), (2, '6-45', 23, 1), (3, '4-101', 15, 2), (4, '2-44', 33, 3), (5, '8-12', 60, 4), (6, '3-01', 28, 5); +-----------+-------+-------+-----------------+ | ReceiptID | Seat | Price | Person_PersonID | +-----------+-------+-------+-----------------+ | 1 | 1-23 | 40 | 1 | | 2 | 6-45 | 23 | 1 | | 3 | 4-101 | 15 | 2 | | 4 | 2-44 | 33 | 3 | | 5 | 8-12 | 60 | 4 | | 6 | 3-01 | 28 | 5 | +-----------+-------+-------+-----------------+ FREIGHT INSERT INTO freight (FreightID, Category, Type, Amount, TotalWeight, Trip_TripID) VALUES (1, 'Bulk', 'Timber', 500, 35000, 1), (2, 'Containerized', 'Heavy machinery', 50, 55000, 2), (3, 'Liquid bulk', 'Petroleum', 10, 25000, 5), (4, 'Bulk', 'Steel', 350, 15000, 3), (5, 'Containerized', 'Electronics', 25, 60000, 5); +-----------+---------------+-----------------+--------+-------------+-------------+ | FreightID | Category | Type | Amount | TotalWeight | Trip_TripID | +-----------+---------------+-----------------+--------+-------------+-------------+ | 1 | Bulk | Timber | 500 | 35000 | 1 | | 2 | Containerized | Heavy machinery | 50 | 55000 | 2 | | 3 | Liquid bulk | Petroleum | 10 | 25000 | 5 | | 4 | Bulk | Steel | 350 | 15000 | 3 | | 5 | Containerized | Electronics | 25 | 60000 | 5 | +-----------+---------------+-----------------+--------+-------------+-------------+ TRIP_HAS_RECEIPT INSERT INTO trip_has_receipt (Trip_TripID, Receipt_ReceiptID) VALUES (1, 3), (1, 1), (2, 4), (3, 2), (4, 6); +-------------+-------------------+ | Trip_TripID | Receipt_ReceiptID | +-------------+-------------------+ | 1 | 1 | | 1 | 3 | | 2 | 4 | | 3 | 2 | | 4 | 6 | +-------------+-------------------+ STAFF INSERT INTO staff (Person_PersonID, Trip_TripID, Rank, Salary) VALUES (7, 1, 'Conductor', 3500), (8, 2, 'Chef', 2750), (7, 3, 'Conductor', 3500), (7, 4, 'Conductor', 3500), (8, 5, 'Chef', 2750), (9, 6, 'Train master', 6500); +-----------------+-------------+--------------+--------+ | Person_PersonID | Trip_TripID | Rank | Salary | +-----------------+-------------+--------------+--------+ | 7 | 1 | Conductor | 3500 | | 7 | 3 | Conductor | 3500 | | 7 | 4 | Conductor | 3500 | | 8 | 2 | Chef | 2750 | | 8 | 5 | Chef | 2750 | | 9 | 6 | Train master | 6500 | +-----------------+-------------+--------------+--------+","title":"Datan lis\u00e4\u00e4minen"},{"location":"Dokumentaatio/","text":"Projektin dokumentaatio Sis\u00e4llysluettelo Tietokannan suunnittelu EER-kaavio Tietokannan suunnittelu K\u00c4SITEANALYYSI Projektin vaatimusm\u00e4\u00e4rittelyst\u00e4 voin aloittaa k\u00e4sitteiden ja niiden ominaisuuksien tunnistamisen. Kirjaan yleisimm\u00e4t k\u00e4sitteet ja ominaisuudet yl\u00f6s ja erittelen ne seuraavaa vaihetta varten. K\u00c4SITTEET Matka Saapumisasema L\u00e4htemisasema Matkan kesto Matkan pituus Juna Asiakas Nimi Sukupuoli Syntym\u00e4p\u00e4iv\u00e4 Lippu Asiakas(FK?) Hinta Istumapaikka Rahtitavara Kategoria Tyyppi M\u00e4\u00e4r\u00e4 Matka(FK?) Juna Yhti\u00f6(FK?) Tunniste(PK?) Istumapaikkam\u00e4\u00e4r\u00e4 Yhti\u00f6 Nimi Huoltoraportti Juna(FK?) P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 Tyyppi Tila Muu kommentti K\u00e4sitteiden ja niiden ominaisuuksien tunnistamisen j\u00e4lkeen voin alkaa suunnittelemaan miten projektin vaatimusm\u00e4\u00e4rittelyss\u00e4 kysytty tietokanta luodaan. Projekti on laaja, joten puran tietokannan toiminnot pienempiin osiin joille luon k\u00e4siteanalyysin yksi kerrallaan. Yksi t\u00e4rkeimmist\u00e4 ominaisuuksista on matkalippujen osto, joten aloitan suunnittelun t\u00e4st\u00e4. Tietokanta tarvitsee t\u00e4t\u00e4 varten 'Henkil\u00f6', 'Lippu' ja 'Matka' -taulun. Kuvaan n\u00e4iden taulujen relaatioita ja attribuutteja n\u00e4in: Lipun ja matkan v\u00e4lille syntyy moni-moneen relaatio, joten t\u00e4m\u00e4 puretaan liitostaululla 'TripLine'. Jokaisella junamatkalla on oltava v\u00e4hint\u00e4\u00e4n yksi henkil\u00f6kunnan j\u00e4sen, joten 'Person' -tauluun joudutaan lis\u00e4\u00e4m\u00e4\u00e4n 'Type' -attribuutti joka kertoo jos henkil\u00f6 on asiakas tai osa henkil\u00f6kuntaa. N\u00e4ill\u00e4 tauluilla ja relaatioilla voidaan k\u00e4sitell\u00e4 matkalippuja, asiakkaita ja henkil\u00f6st\u00f6\u00e4. Seuraavaksi suunnittelen junien, rahtien ja yhti\u00f6iden v\u00e4list\u00e4 relaatiota: N\u00e4iden taulujen lis\u00e4\u00e4minen ei ollut lopulta vaikeaa, sill\u00e4 ne sulautuivat hyvin nykyiseen \"Trip\" -tauluun. T\u00e4ss\u00e4 vaiheessa huomasin merkitt\u00e4v\u00e4n ongelman: Henkil\u00f6st\u00f6n ja asiakkaiden erottelu tulee olemaan hankalaa nykyisess\u00e4 muodossa. 'Person' -tauluun pit\u00e4isi lis\u00e4t\u00e4 vain henkil\u00f6st\u00f6\u00e4 varten palkka, asema ja heille pit\u00e4isi luoda oma \"lippu\" jokaista matkaa varten. Pitk\u00e4n suunnittelun j\u00e4lkeen p\u00e4\u00e4tin ratkaista t\u00e4m\u00e4n ongelman luomalla liitostaulun 'Trip', ja 'Person' -taulun v\u00e4lille. Se toimisi kuten tyypillinen liitostaulu, mutta siihen lis\u00e4t\u00e4\u00e4n henkil\u00f6kuntaj\u00e4senen arvo ja palkka. T\u00e4m\u00e4n lis\u00e4ksi luon uuden \"MaintenanceReport\" -taulun jolla voidaan mitata junien huoltotilannetta ja raportteja. Hion taulujen attribuuttien nimi\u00e4 tarkemmaksi ja lis\u00e4sin niit\u00e4 tarvittaessa vaatimusm\u00e4\u00e4rittelyn mukaisesti: T\u00e4ll\u00e4 k\u00e4sitemallilla pit\u00e4isi pysty\u00e4 suorittamaan vaatimusm\u00e4\u00e4rittelyss\u00e4 esitetyt ominaisuudet. Kun k\u00e4sitemalli on luotu, voin aloittaa EER-kaavion suunnittelemisen 'MySQL WorkBench' -ohjelmistolla. EER-Kaavio EER-KAAVIO K\u00e4siteanalyysin j\u00e4lkeen voin rakentaa EER-kaavion. Koska k\u00e4siteanalyysi tehtiin hyvin kattavaksi, niin EER-kaavion mallentaminen t\u00e4st\u00e4 ei ollut huomattavan ongelmallista. RAJOITUKSET - Juna kuuluu vain yhdelle yhti\u00f6lle. - Lipulla on vain yksi henkil\u00f6. - Junamatkalla on vain yksi juna. - Rahtitavaralla on vain yksi matka. - Huoltoraportilla on vain yksi juna. SUHTEET - Junalla voi olla monta matkaa, mutta matkalla on vain yksi juna. - Matkalla voi olla monta eri rahtitavaraa. - Junalla voi olla monta huoltoraporttia, mutta huoltoraportilla on vain yksi juna. - Lipulla voi olla monta matkaa. (Junien vaihdot) - Yhdell\u00e4 asiakkaalla voi olla monta lippua. - Junalla on vain yksi yhti\u00f6, mutta yhti\u00f6ll\u00e4 voi olla monta junaa.","title":"Projektin dokumentaatio"},{"location":"Dokumentaatio/#projektin-dokumentaatio","text":"","title":"Projektin dokumentaatio"},{"location":"Dokumentaatio/#sisallysluettelo","text":"Tietokannan suunnittelu EER-kaavio","title":"Sis\u00e4llysluettelo"},{"location":"Dokumentaatio/#tietokannan-suunnittelu","text":"K\u00c4SITEANALYYSI Projektin vaatimusm\u00e4\u00e4rittelyst\u00e4 voin aloittaa k\u00e4sitteiden ja niiden ominaisuuksien tunnistamisen. Kirjaan yleisimm\u00e4t k\u00e4sitteet ja ominaisuudet yl\u00f6s ja erittelen ne seuraavaa vaihetta varten. K\u00c4SITTEET Matka Saapumisasema L\u00e4htemisasema Matkan kesto Matkan pituus Juna Asiakas Nimi Sukupuoli Syntym\u00e4p\u00e4iv\u00e4 Lippu Asiakas(FK?) Hinta Istumapaikka Rahtitavara Kategoria Tyyppi M\u00e4\u00e4r\u00e4 Matka(FK?) Juna Yhti\u00f6(FK?) Tunniste(PK?) Istumapaikkam\u00e4\u00e4r\u00e4 Yhti\u00f6 Nimi Huoltoraportti Juna(FK?) P\u00e4iv\u00e4m\u00e4\u00e4r\u00e4 Tyyppi Tila Muu kommentti K\u00e4sitteiden ja niiden ominaisuuksien tunnistamisen j\u00e4lkeen voin alkaa suunnittelemaan miten projektin vaatimusm\u00e4\u00e4rittelyss\u00e4 kysytty tietokanta luodaan. Projekti on laaja, joten puran tietokannan toiminnot pienempiin osiin joille luon k\u00e4siteanalyysin yksi kerrallaan. Yksi t\u00e4rkeimmist\u00e4 ominaisuuksista on matkalippujen osto, joten aloitan suunnittelun t\u00e4st\u00e4. Tietokanta tarvitsee t\u00e4t\u00e4 varten 'Henkil\u00f6', 'Lippu' ja 'Matka' -taulun. Kuvaan n\u00e4iden taulujen relaatioita ja attribuutteja n\u00e4in: Lipun ja matkan v\u00e4lille syntyy moni-moneen relaatio, joten t\u00e4m\u00e4 puretaan liitostaululla 'TripLine'. Jokaisella junamatkalla on oltava v\u00e4hint\u00e4\u00e4n yksi henkil\u00f6kunnan j\u00e4sen, joten 'Person' -tauluun joudutaan lis\u00e4\u00e4m\u00e4\u00e4n 'Type' -attribuutti joka kertoo jos henkil\u00f6 on asiakas tai osa henkil\u00f6kuntaa. N\u00e4ill\u00e4 tauluilla ja relaatioilla voidaan k\u00e4sitell\u00e4 matkalippuja, asiakkaita ja henkil\u00f6st\u00f6\u00e4. Seuraavaksi suunnittelen junien, rahtien ja yhti\u00f6iden v\u00e4list\u00e4 relaatiota: N\u00e4iden taulujen lis\u00e4\u00e4minen ei ollut lopulta vaikeaa, sill\u00e4 ne sulautuivat hyvin nykyiseen \"Trip\" -tauluun. T\u00e4ss\u00e4 vaiheessa huomasin merkitt\u00e4v\u00e4n ongelman: Henkil\u00f6st\u00f6n ja asiakkaiden erottelu tulee olemaan hankalaa nykyisess\u00e4 muodossa. 'Person' -tauluun pit\u00e4isi lis\u00e4t\u00e4 vain henkil\u00f6st\u00f6\u00e4 varten palkka, asema ja heille pit\u00e4isi luoda oma \"lippu\" jokaista matkaa varten. Pitk\u00e4n suunnittelun j\u00e4lkeen p\u00e4\u00e4tin ratkaista t\u00e4m\u00e4n ongelman luomalla liitostaulun 'Trip', ja 'Person' -taulun v\u00e4lille. Se toimisi kuten tyypillinen liitostaulu, mutta siihen lis\u00e4t\u00e4\u00e4n henkil\u00f6kuntaj\u00e4senen arvo ja palkka. T\u00e4m\u00e4n lis\u00e4ksi luon uuden \"MaintenanceReport\" -taulun jolla voidaan mitata junien huoltotilannetta ja raportteja. Hion taulujen attribuuttien nimi\u00e4 tarkemmaksi ja lis\u00e4sin niit\u00e4 tarvittaessa vaatimusm\u00e4\u00e4rittelyn mukaisesti: T\u00e4ll\u00e4 k\u00e4sitemallilla pit\u00e4isi pysty\u00e4 suorittamaan vaatimusm\u00e4\u00e4rittelyss\u00e4 esitetyt ominaisuudet. Kun k\u00e4sitemalli on luotu, voin aloittaa EER-kaavion suunnittelemisen 'MySQL WorkBench' -ohjelmistolla.","title":"Tietokannan suunnittelu"},{"location":"Dokumentaatio/#eer-kaavio","text":"EER-KAAVIO K\u00e4siteanalyysin j\u00e4lkeen voin rakentaa EER-kaavion. Koska k\u00e4siteanalyysi tehtiin hyvin kattavaksi, niin EER-kaavion mallentaminen t\u00e4st\u00e4 ei ollut huomattavan ongelmallista. RAJOITUKSET - Juna kuuluu vain yhdelle yhti\u00f6lle. - Lipulla on vain yksi henkil\u00f6. - Junamatkalla on vain yksi juna. - Rahtitavaralla on vain yksi matka. - Huoltoraportilla on vain yksi juna. SUHTEET - Junalla voi olla monta matkaa, mutta matkalla on vain yksi juna. - Matkalla voi olla monta eri rahtitavaraa. - Junalla voi olla monta huoltoraporttia, mutta huoltoraportilla on vain yksi juna. - Lipulla voi olla monta matkaa. (Junien vaihdot) - Yhdell\u00e4 asiakkaalla voi olla monta lippua. - Junalla on vain yksi yhti\u00f6, mutta yhti\u00f6ll\u00e4 voi olla monta junaa.","title":"EER-Kaavio"},{"location":"Itsearviointi/","text":"Itsearviointi HERKKO MEHT\u00c4L\u00c4 Arvosana: 4,5 Teht\u00e4v\u00e4ni projektissa: Projektin vaatimusm\u00e4\u00e4rittelyn luominen. Projektin k\u00e4sitemallin luominen. Relaatiokaavion luominen MySQL Workbenchill\u00e4. Testidatan lis\u00e4\u00e4minen tietokantaan. Kyselyiden ja n\u00e4kymien luominen. Triggerit ja niiden proseduurit. Indeksien luominen. Projektin dokumentointi. Projektin alkuun saattaminen vaatimusm\u00e4\u00e4rittelyn j\u00e4lkeen oli hieman ongelmallista. Tunsin usein aika turhaantuneelta, kun koitin suunnitella n\u00e4in kattavaa tietokantaa tyhj\u00e4st\u00e4 joka ei johtanut mihink\u00e4\u00e4n. L\u00e4pimurto tapahtui kun p\u00e4\u00e4tin rajata projektin ensin pelkk\u00e4\u00e4n matkalippujen hallitsemiseen ja ostoon. Tietokannan pilkkominen pienempiin osiin osoittautui merkitt\u00e4v\u00e4ksi tekij\u00e4ksi projektin onnistumisen kannalta. Toinen yll\u00e4tt\u00e4v\u00e4 ongelma johon t\u00f6rm\u00e4sin oli attribuuttejen tietotyyppien valinta. Jouduin usein kikkailemaan erilaisten aikaan liittyvien tietotyyppien kanssa, koska n\u00e4it\u00e4 ei pysty yleens\u00e4 summaamaan kesken\u00e4\u00e4n. L\u00e4pimurto t\u00e4h\u00e4n oli, kun l\u00f6ysin netist\u00e4 TIME_TO_SEC() funktion, jolla pystyin muuttamaan kaikki TIME -tietotyypit sekunneiksi, summasin kyseiset sekunnit, ja muutin ne takaisin TIME -tietotyyppiin SEC_TO_TIME() -funktiolla. Tulevaisuudessa tulen miettim\u00e4\u00e4n enemm\u00e4n attribuuttien tietotyyppej\u00e4, jotta voisin v\u00e4ltty\u00e4 kyseisilt\u00e4 kikoilta. Loppujen lopuksi olen eritt\u00e4in tyytyv\u00e4inen minun tietokantaratkaisuun. Ty\u00f6aikaa oli varattu harjoitusty\u00f6h\u00f6n n. 32 tuntia per henkil\u00f6, joka on vastaa aika l\u00e4helle minun panostamaa aikaa t\u00e4h\u00e4n projektiin. Onnistuin saavuttamaan l\u00e4hes kaikki vaatimusm\u00e4\u00e4rittelyss\u00e4 esitetyt asiat ja sain luotua toimivan ja oikeaa k\u00e4ytt\u00f6tapausta kuvaavan tietokantaj\u00e4rjestelm\u00e4n. Projektin aikana opin huomattavan m\u00e4\u00e4r\u00e4n asioita tietokantaj\u00e4rjestelmist\u00e4. T\u00e4m\u00e4n takia arvioisin t\u00e4m\u00e4n ty\u00f6n 4,5 arvosanan tasoiseksi.","title":"Itsearviointi"},{"location":"Itsearviointi/#itsearviointi","text":"HERKKO MEHT\u00c4L\u00c4 Arvosana: 4,5 Teht\u00e4v\u00e4ni projektissa: Projektin vaatimusm\u00e4\u00e4rittelyn luominen. Projektin k\u00e4sitemallin luominen. Relaatiokaavion luominen MySQL Workbenchill\u00e4. Testidatan lis\u00e4\u00e4minen tietokantaan. Kyselyiden ja n\u00e4kymien luominen. Triggerit ja niiden proseduurit. Indeksien luominen. Projektin dokumentointi. Projektin alkuun saattaminen vaatimusm\u00e4\u00e4rittelyn j\u00e4lkeen oli hieman ongelmallista. Tunsin usein aika turhaantuneelta, kun koitin suunnitella n\u00e4in kattavaa tietokantaa tyhj\u00e4st\u00e4 joka ei johtanut mihink\u00e4\u00e4n. L\u00e4pimurto tapahtui kun p\u00e4\u00e4tin rajata projektin ensin pelkk\u00e4\u00e4n matkalippujen hallitsemiseen ja ostoon. Tietokannan pilkkominen pienempiin osiin osoittautui merkitt\u00e4v\u00e4ksi tekij\u00e4ksi projektin onnistumisen kannalta. Toinen yll\u00e4tt\u00e4v\u00e4 ongelma johon t\u00f6rm\u00e4sin oli attribuuttejen tietotyyppien valinta. Jouduin usein kikkailemaan erilaisten aikaan liittyvien tietotyyppien kanssa, koska n\u00e4it\u00e4 ei pysty yleens\u00e4 summaamaan kesken\u00e4\u00e4n. L\u00e4pimurto t\u00e4h\u00e4n oli, kun l\u00f6ysin netist\u00e4 TIME_TO_SEC() funktion, jolla pystyin muuttamaan kaikki TIME -tietotyypit sekunneiksi, summasin kyseiset sekunnit, ja muutin ne takaisin TIME -tietotyyppiin SEC_TO_TIME() -funktiolla. Tulevaisuudessa tulen miettim\u00e4\u00e4n enemm\u00e4n attribuuttien tietotyyppej\u00e4, jotta voisin v\u00e4ltty\u00e4 kyseisilt\u00e4 kikoilta. Loppujen lopuksi olen eritt\u00e4in tyytyv\u00e4inen minun tietokantaratkaisuun. Ty\u00f6aikaa oli varattu harjoitusty\u00f6h\u00f6n n. 32 tuntia per henkil\u00f6, joka on vastaa aika l\u00e4helle minun panostamaa aikaa t\u00e4h\u00e4n projektiin. Onnistuin saavuttamaan l\u00e4hes kaikki vaatimusm\u00e4\u00e4rittelyss\u00e4 esitetyt asiat ja sain luotua toimivan ja oikeaa k\u00e4ytt\u00f6tapausta kuvaavan tietokantaj\u00e4rjestelm\u00e4n. Projektin aikana opin huomattavan m\u00e4\u00e4r\u00e4n asioita tietokantaj\u00e4rjestelmist\u00e4. T\u00e4m\u00e4n takia arvioisin t\u00e4m\u00e4n ty\u00f6n 4,5 arvosanan tasoiseksi.","title":"Itsearviointi"},{"location":"Optimointi/","text":"Tietokannan optimointi N\u00c4KYM\u00c4T Luodaan n\u00e4kym\u00e4, jolla voidaan katsella kaikki junat ja niiden tekniset tiedot nopeasti: CREATE VIEW Trains AS SELECT TrainID, Manufacturer, SeatAmount, Horsepower FROM train; -- K\u00e4ytt\u00f6 SELECT * FROM Trains; INDEKSOINTI Luodaan tietokantaan seuraaville tauluille ja niiden sarakkeille indeksit suorituskyvyn parantamista varten. 'Freight' -taulu CREATE INDEX i_freightCategory ON freight(Category); CREATE INDEX i_freightType ON freight(Type); CREATE INDEX i_freightID ON freight(freightID); 'Person' -taulu CREATE INDEX i_personID ON Person(PersonID); CREATE INDEX i_personFirsname ON Person(Firstname); CREATE INDEX i_personLastname ON Person(Lastname); 'Receipt' -taulu CREATE INDEX i_receiptID ON receipt(ReceiptID); CREATE INDEX i_receiptSeat ON receipt(Seat); CREATE INDEX i_receiptPrice ON receipt(Price); 'Trip' -taulu CREATE INDEX i_tripID ON trip(TripID); CREATE INDEX i_tripEstimatedTime ON trip(EstimatedTime); CREATE INDEX i_tripTotalDistance ON trip(TotalDistance); CREATE INDEX i_tripArrivalStation ON trip(ArrivalStation); CREATE INDEX i_tripDepartingStation ON trip(DepartingStation); 'train' -taulu CREATE INDEX i_trainID ON train(TrainID); TRANSAKTIOT Transaktiota pit\u00e4\u00e4 k\u00e4ytt\u00e4\u00e4 lipunoston yhteydess\u00e4. T\u00e4m\u00e4 tehd\u00e4\u00e4n siksi, ett\u00e4 tietojen tallentuminen onnistuisi ongelmitta. Esimerkki: BEGIN; INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES (7, '5-21', 42, 2); INSERT INTO trip_has_receipt (Trip_TripID, Receipt_ReceiptID) VALUES (2, 7); COMMIT; TRIGGERIT Luon triggerin seuraaville tauluille alla mainituilla ehdoilla: Receipt Price (Price > 0) T\u00e4ll\u00e4 varmistetaan, ett\u00e4 matkalipun hinta ei ole negatiivinen. DELIMITER $$ CREATE TRIGGER Receipt BEFORE INSERT ON Receipt FOR EACH ROW BEGIN IF!(NEW.Price > 0) THEN CALL `ERROR: Price cannot be lower than 0!`; END IF; END$$ DELIMITER ; TRIGGERIN TESTAUS MariaDB [rautatiejarjestelma_db]> INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES(8, '2-14', 0, 1); ERROR 1305 (42000): PROCEDURE rautatiejarjestelma_db.ERROR: Price cannot be lower than 0! does not exist MariaDB [rautatiejarjestelma_db]> INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES(8, '2-14', 35, 1); Query OK, 1 row affected (0.002 sec)","title":"Tietokannan optimointi"},{"location":"Optimointi/#tietokannan-optimointi","text":"N\u00c4KYM\u00c4T Luodaan n\u00e4kym\u00e4, jolla voidaan katsella kaikki junat ja niiden tekniset tiedot nopeasti: CREATE VIEW Trains AS SELECT TrainID, Manufacturer, SeatAmount, Horsepower FROM train; -- K\u00e4ytt\u00f6 SELECT * FROM Trains; INDEKSOINTI Luodaan tietokantaan seuraaville tauluille ja niiden sarakkeille indeksit suorituskyvyn parantamista varten. 'Freight' -taulu CREATE INDEX i_freightCategory ON freight(Category); CREATE INDEX i_freightType ON freight(Type); CREATE INDEX i_freightID ON freight(freightID); 'Person' -taulu CREATE INDEX i_personID ON Person(PersonID); CREATE INDEX i_personFirsname ON Person(Firstname); CREATE INDEX i_personLastname ON Person(Lastname); 'Receipt' -taulu CREATE INDEX i_receiptID ON receipt(ReceiptID); CREATE INDEX i_receiptSeat ON receipt(Seat); CREATE INDEX i_receiptPrice ON receipt(Price); 'Trip' -taulu CREATE INDEX i_tripID ON trip(TripID); CREATE INDEX i_tripEstimatedTime ON trip(EstimatedTime); CREATE INDEX i_tripTotalDistance ON trip(TotalDistance); CREATE INDEX i_tripArrivalStation ON trip(ArrivalStation); CREATE INDEX i_tripDepartingStation ON trip(DepartingStation); 'train' -taulu CREATE INDEX i_trainID ON train(TrainID); TRANSAKTIOT Transaktiota pit\u00e4\u00e4 k\u00e4ytt\u00e4\u00e4 lipunoston yhteydess\u00e4. T\u00e4m\u00e4 tehd\u00e4\u00e4n siksi, ett\u00e4 tietojen tallentuminen onnistuisi ongelmitta. Esimerkki: BEGIN; INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES (7, '5-21', 42, 2); INSERT INTO trip_has_receipt (Trip_TripID, Receipt_ReceiptID) VALUES (2, 7); COMMIT; TRIGGERIT Luon triggerin seuraaville tauluille alla mainituilla ehdoilla: Receipt Price (Price > 0) T\u00e4ll\u00e4 varmistetaan, ett\u00e4 matkalipun hinta ei ole negatiivinen. DELIMITER $$ CREATE TRIGGER Receipt BEFORE INSERT ON Receipt FOR EACH ROW BEGIN IF!(NEW.Price > 0) THEN CALL `ERROR: Price cannot be lower than 0!`; END IF; END$$ DELIMITER ; TRIGGERIN TESTAUS MariaDB [rautatiejarjestelma_db]> INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES(8, '2-14', 0, 1); ERROR 1305 (42000): PROCEDURE rautatiejarjestelma_db.ERROR: Price cannot be lower than 0! does not exist MariaDB [rautatiejarjestelma_db]> INSERT INTO receipt (ReceiptID, Seat, Price, Person_PersonID) VALUES(8, '2-14', 35, 1); Query OK, 1 row affected (0.002 sec)","title":"Tietokannan optimointi"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/","text":"Vaatimusm\u00e4\u00e4rittely Ty\u00f6ryhm\u00e4 Meht\u00e4l\u00e4 Herkko, TTV20S2 Sis\u00e4llysluettelo Johdanto Yleiskuvaus Toiminnot Muut ominaisuudet Johdanto Projektin tavoitteena on luoda asiakkaalle rautatiej\u00e4rjestelm\u00e4n tietokanta. Ty\u00f6ntilaaja vaati kattavan junahallintaj\u00e4rjestelm\u00e4n tietokannan, joka tarkoittaa, ett\u00e4 tietokannassa tulee huomioida sek\u00e4 junat, huoltoraportit, matkustukset, henkil\u00f6st\u00f6t, liput ja rahtitavarat. Projektin tietokanta on rajattu niin, ett\u00e4 sill\u00e4 ei voi hallita rautatieverkkoa vaan korkeintaan valvoa sit\u00e4. Yleiskuvaus Ensimm\u00e4iseksi toteutetaan j\u00e4rjestelm\u00e4n tarvitsema tietokanta, jonka j\u00e4lkeen sinne lis\u00e4t\u00e4\u00e4n testaukseen tarvittava data. Tietokanta toteutetaan 'MySQL Workbench' -ohjelmistolla. Tietokantaj\u00e4rjestelm\u00e4 sijoitetaan lopulta JAMK:in tietokantapalvelimelle. Oikeudet tietokantaan m\u00e4\u00e4ritell\u00e4\u00e4n tietokantaohjelmiston omilla toiminnoilla. Toiminnot Pakolliset toiminnot ovat: Ty\u00f6ntilaaja pystyy hakemaan tietoa junayhti\u00f6n junista, henkil\u00f6kunnasta ja junaliikenteest\u00e4. K\u00e4ytt\u00e4j\u00e4 pystyy hakemaan tietoja omasta lipustaan, lippuhistoriasta ja omat k\u00e4ytt\u00e4j\u00e4tiedot. Henkil\u00f6kunta pystyy hakemaan tietoja junamatkasta kuten l\u00e4htemis- ja saapumisasemat ja kuinka kauan matka kest\u00e4\u00e4. Tietokannasta voidaan hakea junamatkan lastiluettelo. Tietokannasta voidaan hakea junamatkojen henkil\u00f6kunta ja matkustajat. Tietokannasta voidaan laskea henkil\u00f6kunnan ty\u00f6tunnit. T\u00e4rke\u00e4t toiminnot ovat: Junayhti\u00f6t voivat hakea tietyn junan kaikki matkatunnit. Tietokannasta voidaan tarkastella junien huoltoraportteja tietylt\u00e4 aikav\u00e4lilt\u00e4. Voidaan valvoa tietylle asemalle tulleita rahtitavaroita. Tietokannan k\u00e4ytt\u00f6tavat Kuluttaja: Kuluttaja voi hakea tietoa omista matkalipuistaan, junamatkoista, matkakohteista ja omasta matkahistoriasta. Junayhti\u00f6t: Voivat kysy\u00e4 tietoa junistaan, niiden huoltoraporteista, sek\u00e4 matkojen henkil\u00f6st\u00f6st\u00e4. Rautatieliikenneseuranta: Seurannalla voidaan lukea asemien rautatieliikennett\u00e4 ja niiden kautta kulkevasta rahtitavarasta. Ulkoiset liittym\u00e4t - Baliisi kulunvalvonta komponentit. - Junien liikenteenohjausj\u00e4rjestelm\u00e4t. - 'European Train Control System' tulevaisuudessa. Muut ominaisuudet Suorituskyky - Vasteajat tyypillisell\u00e4 tietokoneella (Windows 10, jossa 4GB RAM ja 3 GHz:n prosessori n. 10000 rivin tietom\u00e4\u00e4r\u00e4ll\u00e4) alle 1 sekuntti. T\u00e4ll\u00e4 mahdollistetaan, ett\u00e4 tietokanta toimisi mahdollisimman reaaliaikaisesti. Tietoturva - Tietokanta tulee luoda tavalla, jotta lopullisessa toteutuksessa kuluttajien, yhti\u00f6iden, lastiluettelojen ja lippujen data voidaan salata. Tietokannassa tulee olla jaetut oikeudet ja mahdollistetaan tietokannan varmuuskopiointi. Siirrett\u00e4vyys - Tietokanta rakennetaan siten, ett\u00e4 sen voi siirt\u00e4\u00e4 palvelimelta toiselle esimerkiksi kloonaamalla k\u00e4ytt\u00e4m\u00e4ll\u00e4 MySQL Workbench 'Migration' -ty\u00f6kalua. Yll\u00e4pidett\u00e4vyys - Ajan tasalla oleva j\u00e4rjestelm\u00e4dokumentaatio. - Vaatimusm\u00e4\u00e4rittelydokumentti. - ER-kaavio ja rajoitusten tarkka kartoitus. - J\u00e4rjestelm\u00e4n testaus ja p\u00e4ivitys. K\u00e4ytett\u00e4vyys - Tietokannan kehityksen aikana suoritetaan asiakaskuuleminen jolla kehitet\u00e4\u00e4n j\u00e4rjestelm\u00e4n k\u00e4ytett\u00e4vyytt\u00e4.","title":"Vaatimusm\u00e4\u00e4rittely"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#vaatimusmaarittely","text":"Ty\u00f6ryhm\u00e4 Meht\u00e4l\u00e4 Herkko, TTV20S2","title":"Vaatimusm\u00e4\u00e4rittely"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#sisallysluettelo","text":"Johdanto Yleiskuvaus Toiminnot Muut ominaisuudet","title":"Sis\u00e4llysluettelo"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#johdanto","text":"Projektin tavoitteena on luoda asiakkaalle rautatiej\u00e4rjestelm\u00e4n tietokanta. Ty\u00f6ntilaaja vaati kattavan junahallintaj\u00e4rjestelm\u00e4n tietokannan, joka tarkoittaa, ett\u00e4 tietokannassa tulee huomioida sek\u00e4 junat, huoltoraportit, matkustukset, henkil\u00f6st\u00f6t, liput ja rahtitavarat. Projektin tietokanta on rajattu niin, ett\u00e4 sill\u00e4 ei voi hallita rautatieverkkoa vaan korkeintaan valvoa sit\u00e4.","title":"Johdanto"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#yleiskuvaus","text":"Ensimm\u00e4iseksi toteutetaan j\u00e4rjestelm\u00e4n tarvitsema tietokanta, jonka j\u00e4lkeen sinne lis\u00e4t\u00e4\u00e4n testaukseen tarvittava data. Tietokanta toteutetaan 'MySQL Workbench' -ohjelmistolla. Tietokantaj\u00e4rjestelm\u00e4 sijoitetaan lopulta JAMK:in tietokantapalvelimelle. Oikeudet tietokantaan m\u00e4\u00e4ritell\u00e4\u00e4n tietokantaohjelmiston omilla toiminnoilla.","title":"Yleiskuvaus"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#toiminnot","text":"Pakolliset toiminnot ovat: Ty\u00f6ntilaaja pystyy hakemaan tietoa junayhti\u00f6n junista, henkil\u00f6kunnasta ja junaliikenteest\u00e4. K\u00e4ytt\u00e4j\u00e4 pystyy hakemaan tietoja omasta lipustaan, lippuhistoriasta ja omat k\u00e4ytt\u00e4j\u00e4tiedot. Henkil\u00f6kunta pystyy hakemaan tietoja junamatkasta kuten l\u00e4htemis- ja saapumisasemat ja kuinka kauan matka kest\u00e4\u00e4. Tietokannasta voidaan hakea junamatkan lastiluettelo. Tietokannasta voidaan hakea junamatkojen henkil\u00f6kunta ja matkustajat. Tietokannasta voidaan laskea henkil\u00f6kunnan ty\u00f6tunnit. T\u00e4rke\u00e4t toiminnot ovat: Junayhti\u00f6t voivat hakea tietyn junan kaikki matkatunnit. Tietokannasta voidaan tarkastella junien huoltoraportteja tietylt\u00e4 aikav\u00e4lilt\u00e4. Voidaan valvoa tietylle asemalle tulleita rahtitavaroita. Tietokannan k\u00e4ytt\u00f6tavat Kuluttaja: Kuluttaja voi hakea tietoa omista matkalipuistaan, junamatkoista, matkakohteista ja omasta matkahistoriasta. Junayhti\u00f6t: Voivat kysy\u00e4 tietoa junistaan, niiden huoltoraporteista, sek\u00e4 matkojen henkil\u00f6st\u00f6st\u00e4. Rautatieliikenneseuranta: Seurannalla voidaan lukea asemien rautatieliikennett\u00e4 ja niiden kautta kulkevasta rahtitavarasta. Ulkoiset liittym\u00e4t - Baliisi kulunvalvonta komponentit. - Junien liikenteenohjausj\u00e4rjestelm\u00e4t. - 'European Train Control System' tulevaisuudessa.","title":"Toiminnot"},{"location":"Projektin-vaatimusm%C3%A4%C3%A4rittely/#muut-ominaisuudet","text":"Suorituskyky - Vasteajat tyypillisell\u00e4 tietokoneella (Windows 10, jossa 4GB RAM ja 3 GHz:n prosessori n. 10000 rivin tietom\u00e4\u00e4r\u00e4ll\u00e4) alle 1 sekuntti. T\u00e4ll\u00e4 mahdollistetaan, ett\u00e4 tietokanta toimisi mahdollisimman reaaliaikaisesti. Tietoturva - Tietokanta tulee luoda tavalla, jotta lopullisessa toteutuksessa kuluttajien, yhti\u00f6iden, lastiluettelojen ja lippujen data voidaan salata. Tietokannassa tulee olla jaetut oikeudet ja mahdollistetaan tietokannan varmuuskopiointi. Siirrett\u00e4vyys - Tietokanta rakennetaan siten, ett\u00e4 sen voi siirt\u00e4\u00e4 palvelimelta toiselle esimerkiksi kloonaamalla k\u00e4ytt\u00e4m\u00e4ll\u00e4 MySQL Workbench 'Migration' -ty\u00f6kalua. Yll\u00e4pidett\u00e4vyys - Ajan tasalla oleva j\u00e4rjestelm\u00e4dokumentaatio. - Vaatimusm\u00e4\u00e4rittelydokumentti. - ER-kaavio ja rajoitusten tarkka kartoitus. - J\u00e4rjestelm\u00e4n testaus ja p\u00e4ivitys. K\u00e4ytett\u00e4vyys - Tietokannan kehityksen aikana suoritetaan asiakaskuuleminen jolla kehitet\u00e4\u00e4n j\u00e4rjestelm\u00e4n k\u00e4ytett\u00e4vyytt\u00e4.","title":"Muut ominaisuudet"},{"location":"SQL-skripti/","text":"SQL-skripti T\u00e4m\u00e4n scriptin suorittamalla voit luoda t\u00e4m\u00e4n harjoitusty\u00f6n tietokannan kokonaisuudessaan mihin tahansa tyhj\u00e4\u00e4n mariaDB-tietokantaan kokeillaksesi sit\u00e4: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema rautatiejarjestelma_db -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema rautatiejarjestelma_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `rautatiejarjestelma_db` DEFAULT CHARACTER SET utf8 ; USE `rautatiejarjestelma_db` ; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Person` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Person` ( `PersonID` INT NOT NULL, `Firstname` VARCHAR(45) NOT NULL, `Lastname` VARCHAR(45) NOT NULL, `Birthday` DATE NOT NULL, `TYPE` VARCHAR(45) NOT NULL, `Gender` CHAR(1) NOT NULL, PRIMARY KEY (`PersonID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Receipt` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Receipt` ( `ReceiptID` INT NOT NULL, `Seat` VARCHAR(45) NOT NULL, `Price` INT NOT NULL, `Person_PersonID` INT NOT NULL, PRIMARY KEY (`ReceiptID`), INDEX `fk_Receipt_Person1_idx` (`Person_PersonID` ASC), CONSTRAINT `fk_Receipt_Person1` FOREIGN KEY (`Person_PersonID`) REFERENCES `rautatiejarjestelma_db`.`Person` (`PersonID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Company` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Company` ( `CompanyID` INT NOT NULL, `CEO` VARCHAR(45) NOT NULL, PRIMARY KEY (`CompanyID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Train` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Train` ( `TrainID` INT NOT NULL, `Manufacturer` VARCHAR(45) NOT NULL, `SeatAmount` INT NOT NULL, `Horsepower` INT NOT NULL, `Company_CompanyID` INT NOT NULL, PRIMARY KEY (`TrainID`), INDEX `fk_Train_Company1_idx` (`Company_CompanyID` ASC), CONSTRAINT `fk_Train_Company1` FOREIGN KEY (`Company_CompanyID`) REFERENCES `rautatiejarjestelma_db`.`Company` (`CompanyID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Trip` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Trip` ( `TripID` INT NOT NULL, `DepartingStation` VARCHAR(10) NOT NULL, `ArrivalStation` VARCHAR(10) NOT NULL, `EstimatedTime` TIME NOT NULL, `TotalDistance` INT NOT NULL, `Train_TrainID` INT NOT NULL, PRIMARY KEY (`TripID`), INDEX `fk_Trip_Train1_idx` (`Train_TrainID` ASC), CONSTRAINT `fk_Trip_Train1` FOREIGN KEY (`Train_TrainID`) REFERENCES `rautatiejarjestelma_db`.`Train` (`TrainID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Freight` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Freight` ( `FreightID` INT NOT NULL, `Category` VARCHAR(45) NOT NULL, `Type` VARCHAR(45) NOT NULL, `Amount` INT NOT NULL, `TotalWeight` INT NOT NULL, `Trip_TripID` INT NOT NULL, PRIMARY KEY (`FreightID`), INDEX `fk_Freight_Trip1_idx` (`Trip_TripID` ASC), CONSTRAINT `fk_Freight_Trip1` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Trip_has_Receipt` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Trip_has_Receipt` ( `Trip_TripID` INT NOT NULL, `Receipt_ReceiptID` INT NOT NULL, PRIMARY KEY (`Trip_TripID`, `Receipt_ReceiptID`), INDEX `fk_Trip_has_Receipt_Receipt1_idx` (`Receipt_ReceiptID` ASC), INDEX `fk_Trip_has_Receipt_Trip_idx` (`Trip_TripID` ASC), CONSTRAINT `fk_Trip_has_Receipt_Trip` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Trip_has_Receipt_Receipt1` FOREIGN KEY (`Receipt_ReceiptID`) REFERENCES `rautatiejarjestelma_db`.`Receipt` (`ReceiptID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Staff` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Staff` ( `Person_PersonID` INT NOT NULL, `Trip_TripID` INT NOT NULL, `Rank` VARCHAR(20) NOT NULL, `Salary` INT NOT NULL, PRIMARY KEY (`Person_PersonID`, `Trip_TripID`), INDEX `fk_Person_has_Trip_Trip1_idx` (`Trip_TripID` ASC), INDEX `fk_Person_has_Trip_Person1_idx` (`Person_PersonID` ASC), CONSTRAINT `fk_Person_has_Trip_Person1` FOREIGN KEY (`Person_PersonID`) REFERENCES `rautatiejarjestelma_db`.`Person` (`PersonID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Person_has_Trip_Trip1` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`MaintenanceReport` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`MaintenanceReport` ( `MaintenanceID` INT NOT NULL, `Date` DATE NOT NULL, `Type` VARCHAR(20) NOT NULL, `Status` VARCHAR(20) NOT NULL, `Other` VARCHAR(45) NULL, `Train_TrainID` INT NOT NULL, PRIMARY KEY (`MaintenanceID`), INDEX `fk_MaintenanceReport_Train1_idx` (`Train_TrainID` ASC), CONSTRAINT `fk_MaintenanceReport_Train1` FOREIGN KEY (`Train_TrainID`) REFERENCES `rautatiejarjestelma_db`.`Train` (`TrainID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;","title":"SQL-skripti"},{"location":"SQL-skripti/#sql-skripti","text":"T\u00e4m\u00e4n scriptin suorittamalla voit luoda t\u00e4m\u00e4n harjoitusty\u00f6n tietokannan kokonaisuudessaan mihin tahansa tyhj\u00e4\u00e4n mariaDB-tietokantaan kokeillaksesi sit\u00e4: -- MySQL Workbench Forward Engineering SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; -- ----------------------------------------------------- -- Schema rautatiejarjestelma_db -- ----------------------------------------------------- -- ----------------------------------------------------- -- Schema rautatiejarjestelma_db -- ----------------------------------------------------- CREATE SCHEMA IF NOT EXISTS `rautatiejarjestelma_db` DEFAULT CHARACTER SET utf8 ; USE `rautatiejarjestelma_db` ; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Person` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Person` ( `PersonID` INT NOT NULL, `Firstname` VARCHAR(45) NOT NULL, `Lastname` VARCHAR(45) NOT NULL, `Birthday` DATE NOT NULL, `TYPE` VARCHAR(45) NOT NULL, `Gender` CHAR(1) NOT NULL, PRIMARY KEY (`PersonID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Receipt` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Receipt` ( `ReceiptID` INT NOT NULL, `Seat` VARCHAR(45) NOT NULL, `Price` INT NOT NULL, `Person_PersonID` INT NOT NULL, PRIMARY KEY (`ReceiptID`), INDEX `fk_Receipt_Person1_idx` (`Person_PersonID` ASC), CONSTRAINT `fk_Receipt_Person1` FOREIGN KEY (`Person_PersonID`) REFERENCES `rautatiejarjestelma_db`.`Person` (`PersonID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Company` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Company` ( `CompanyID` INT NOT NULL, `CEO` VARCHAR(45) NOT NULL, PRIMARY KEY (`CompanyID`)) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Train` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Train` ( `TrainID` INT NOT NULL, `Manufacturer` VARCHAR(45) NOT NULL, `SeatAmount` INT NOT NULL, `Horsepower` INT NOT NULL, `Company_CompanyID` INT NOT NULL, PRIMARY KEY (`TrainID`), INDEX `fk_Train_Company1_idx` (`Company_CompanyID` ASC), CONSTRAINT `fk_Train_Company1` FOREIGN KEY (`Company_CompanyID`) REFERENCES `rautatiejarjestelma_db`.`Company` (`CompanyID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Trip` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Trip` ( `TripID` INT NOT NULL, `DepartingStation` VARCHAR(10) NOT NULL, `ArrivalStation` VARCHAR(10) NOT NULL, `EstimatedTime` TIME NOT NULL, `TotalDistance` INT NOT NULL, `Train_TrainID` INT NOT NULL, PRIMARY KEY (`TripID`), INDEX `fk_Trip_Train1_idx` (`Train_TrainID` ASC), CONSTRAINT `fk_Trip_Train1` FOREIGN KEY (`Train_TrainID`) REFERENCES `rautatiejarjestelma_db`.`Train` (`TrainID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Freight` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Freight` ( `FreightID` INT NOT NULL, `Category` VARCHAR(45) NOT NULL, `Type` VARCHAR(45) NOT NULL, `Amount` INT NOT NULL, `TotalWeight` INT NOT NULL, `Trip_TripID` INT NOT NULL, PRIMARY KEY (`FreightID`), INDEX `fk_Freight_Trip1_idx` (`Trip_TripID` ASC), CONSTRAINT `fk_Freight_Trip1` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Trip_has_Receipt` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Trip_has_Receipt` ( `Trip_TripID` INT NOT NULL, `Receipt_ReceiptID` INT NOT NULL, PRIMARY KEY (`Trip_TripID`, `Receipt_ReceiptID`), INDEX `fk_Trip_has_Receipt_Receipt1_idx` (`Receipt_ReceiptID` ASC), INDEX `fk_Trip_has_Receipt_Trip_idx` (`Trip_TripID` ASC), CONSTRAINT `fk_Trip_has_Receipt_Trip` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Trip_has_Receipt_Receipt1` FOREIGN KEY (`Receipt_ReceiptID`) REFERENCES `rautatiejarjestelma_db`.`Receipt` (`ReceiptID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`Staff` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`Staff` ( `Person_PersonID` INT NOT NULL, `Trip_TripID` INT NOT NULL, `Rank` VARCHAR(20) NOT NULL, `Salary` INT NOT NULL, PRIMARY KEY (`Person_PersonID`, `Trip_TripID`), INDEX `fk_Person_has_Trip_Trip1_idx` (`Trip_TripID` ASC), INDEX `fk_Person_has_Trip_Person1_idx` (`Person_PersonID` ASC), CONSTRAINT `fk_Person_has_Trip_Person1` FOREIGN KEY (`Person_PersonID`) REFERENCES `rautatiejarjestelma_db`.`Person` (`PersonID`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `fk_Person_has_Trip_Trip1` FOREIGN KEY (`Trip_TripID`) REFERENCES `rautatiejarjestelma_db`.`Trip` (`TripID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; -- ----------------------------------------------------- -- Table `rautatiejarjestelma_db`.`MaintenanceReport` -- ----------------------------------------------------- CREATE TABLE IF NOT EXISTS `rautatiejarjestelma_db`.`MaintenanceReport` ( `MaintenanceID` INT NOT NULL, `Date` DATE NOT NULL, `Type` VARCHAR(20) NOT NULL, `Status` VARCHAR(20) NOT NULL, `Other` VARCHAR(45) NULL, `Train_TrainID` INT NOT NULL, PRIMARY KEY (`MaintenanceID`), INDEX `fk_MaintenanceReport_Train1_idx` (`Train_TrainID` ASC), CONSTRAINT `fk_MaintenanceReport_Train1` FOREIGN KEY (`Train_TrainID`) REFERENCES `rautatiejarjestelma_db`.`Train` (`TrainID`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE = InnoDB; SET SQL_MODE=@OLD_SQL_MODE; SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;","title":"SQL-skripti"},{"location":"kyselyt/","text":"SQL kyselyt Hae tietyn yhti\u00f6n kaikki junat. (Rogersound) SELECT train.TrainID, train.Manufacturer, train.SeatAmount, train.Horsepower FROM train INNER JOIN company ON train.Company_CompanyID = company.CompanyID WHERE company.Name = 'Rogersound'; Hae tietyn henkil\u00f6n kaikki liput. (Salla Holappa) SELECT p.PersonID, p.Firstname, p.Lastname, r.Seat, r.Price FROM person p INNER JOIN receipt r ON p.PersonID = r.Person_PersonID WHERE p.Firstname = 'Salla' AND p.Lastname = 'Holappa'; Hae tietyn junan kaikki huoltoraportit. (Juna ID 1) SELECT train.TrainID, Date, Type, Status, Other FROM maintenancereport INNER JOIN train ON train.TrainID = Train_TrainID WHERE train.TrainID = '1'; Hae tietyn junan kaikki huoltoraportit tietylt\u00e4 aikav\u00e4lilt\u00e4. (Juna ID 1, aikav\u00e4li 2018-02-01 ja 2021-02-28) SELECT train.TrainID, m.Date, m.Type, m.Status, m.Other FROM maintenancereport m INNER JOIN train ON train.TrainID = m.Train_TrainID WHERE train.TrainID = 1 AND (m.Date BETWEEN CAST('2018-02-01' AS DATE) AND CAST('2021-02-28' AS DATE)); Hae tietyn junan matkatunnit ja niiden keskiarvo. (Juna ID 1) SELECT train.TrainID, SEC_TO_TIME(AVG(TIME_TO_SEC(trip.EstimatedTime))) AS AverageTripHours, SEC_TO_TIME(SUM(TIME_TO_SEC(trip.EstimatedTime))) AS TotalTripHours FROM trip INNER JOIN train ON train.TrainID = trip.Train_TrainID WHERE train.TrainID = 1; Hae tietyn matkan kaikki matkustajat (Matka ID 1) SELECT p.Firstname, p.Lastname, p.TYPE, r.Seat, r.Price FROM trip INNER JOIN trip_has_receipt tr ON tr.Trip_TripID = TripID INNER JOIN Receipt r ON r.ReceiptID = tr.Receipt_ReceiptID INNER JOIN Person p ON p.PersonID = r.Person_PersonID WHERE TripID = 1; Hae tietyn matkan kaikki henkil\u00f6kunta (Matka ID 1) SELECT p.Firstname, p.Lastname, p.TYPE, s.Rank, s.Salary FROM trip INNER JOIN staff s ON s.Trip_TripID = TripID INNER JOIN person p ON p.PersonID = s.Person_PersonID WHERE TripID = 1; Hae tietyn henkil\u00f6kuntaj\u00e4senen ty\u00f6tunnit (Kaari Kulju) SELECT p.Firstname, p.Lastname, SEC_TO_TIME(SUM(TIME_TO_SEC(EstimatedTime))) as TotalHours FROM trip INNER JOIN staff s ON s.Trip_TripID = TripID INNER JOIN person p ON p.PersonID = s.Person_PersonID WHERE p.Firstname = 'Kaari' AND p.Lastname = 'Kulju'; Hae tietyn matkan rahtitavarat (Matka ID 5) SELECT tr.TrainID, f.Category, f.Type, f.Amount, f.TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID WHERE f.Trip_TripID = 5; Hae tietyn junan kaikkien kuljetettujen rahtitavaroiden paino ja niiden keskiarvo (Juna ID 4) SELECT tr.TrainID, AVG(f.TotalWeight) AS AVG_Weight, SUM(f.TotalWeight) AS SUM_TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID WHERE tr.TrainID = 4; Hae tietylle asemalle tullut rahtitavara, yhti\u00f6 ja sen juna joka toimitti kyseisen rahtitavaran. (Oulu) SELECT c.Name AS Delivering_Company,tr.TrainID, f.Category, f.Type, f.Amount, f.TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID INNER JOIN company c ON c.CompanyID = tr.Company_CompanyID WHERE ArrivalStation = 'Oulu'; HUOM! Jos haluaa tiet\u00e4\u00e4 mit\u00e4 rahtia on l\u00e4htenyt joltakin asemalta, pit\u00e4\u00e4 vain vaihtaa 'ArrivalStation' 'DepartingStation'.","title":"SQL kyselyt"},{"location":"kyselyt/#sql-kyselyt","text":"Hae tietyn yhti\u00f6n kaikki junat. (Rogersound) SELECT train.TrainID, train.Manufacturer, train.SeatAmount, train.Horsepower FROM train INNER JOIN company ON train.Company_CompanyID = company.CompanyID WHERE company.Name = 'Rogersound'; Hae tietyn henkil\u00f6n kaikki liput. (Salla Holappa) SELECT p.PersonID, p.Firstname, p.Lastname, r.Seat, r.Price FROM person p INNER JOIN receipt r ON p.PersonID = r.Person_PersonID WHERE p.Firstname = 'Salla' AND p.Lastname = 'Holappa'; Hae tietyn junan kaikki huoltoraportit. (Juna ID 1) SELECT train.TrainID, Date, Type, Status, Other FROM maintenancereport INNER JOIN train ON train.TrainID = Train_TrainID WHERE train.TrainID = '1'; Hae tietyn junan kaikki huoltoraportit tietylt\u00e4 aikav\u00e4lilt\u00e4. (Juna ID 1, aikav\u00e4li 2018-02-01 ja 2021-02-28) SELECT train.TrainID, m.Date, m.Type, m.Status, m.Other FROM maintenancereport m INNER JOIN train ON train.TrainID = m.Train_TrainID WHERE train.TrainID = 1 AND (m.Date BETWEEN CAST('2018-02-01' AS DATE) AND CAST('2021-02-28' AS DATE)); Hae tietyn junan matkatunnit ja niiden keskiarvo. (Juna ID 1) SELECT train.TrainID, SEC_TO_TIME(AVG(TIME_TO_SEC(trip.EstimatedTime))) AS AverageTripHours, SEC_TO_TIME(SUM(TIME_TO_SEC(trip.EstimatedTime))) AS TotalTripHours FROM trip INNER JOIN train ON train.TrainID = trip.Train_TrainID WHERE train.TrainID = 1; Hae tietyn matkan kaikki matkustajat (Matka ID 1) SELECT p.Firstname, p.Lastname, p.TYPE, r.Seat, r.Price FROM trip INNER JOIN trip_has_receipt tr ON tr.Trip_TripID = TripID INNER JOIN Receipt r ON r.ReceiptID = tr.Receipt_ReceiptID INNER JOIN Person p ON p.PersonID = r.Person_PersonID WHERE TripID = 1; Hae tietyn matkan kaikki henkil\u00f6kunta (Matka ID 1) SELECT p.Firstname, p.Lastname, p.TYPE, s.Rank, s.Salary FROM trip INNER JOIN staff s ON s.Trip_TripID = TripID INNER JOIN person p ON p.PersonID = s.Person_PersonID WHERE TripID = 1; Hae tietyn henkil\u00f6kuntaj\u00e4senen ty\u00f6tunnit (Kaari Kulju) SELECT p.Firstname, p.Lastname, SEC_TO_TIME(SUM(TIME_TO_SEC(EstimatedTime))) as TotalHours FROM trip INNER JOIN staff s ON s.Trip_TripID = TripID INNER JOIN person p ON p.PersonID = s.Person_PersonID WHERE p.Firstname = 'Kaari' AND p.Lastname = 'Kulju'; Hae tietyn matkan rahtitavarat (Matka ID 5) SELECT tr.TrainID, f.Category, f.Type, f.Amount, f.TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID WHERE f.Trip_TripID = 5; Hae tietyn junan kaikkien kuljetettujen rahtitavaroiden paino ja niiden keskiarvo (Juna ID 4) SELECT tr.TrainID, AVG(f.TotalWeight) AS AVG_Weight, SUM(f.TotalWeight) AS SUM_TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID WHERE tr.TrainID = 4; Hae tietylle asemalle tullut rahtitavara, yhti\u00f6 ja sen juna joka toimitti kyseisen rahtitavaran. (Oulu) SELECT c.Name AS Delivering_Company,tr.TrainID, f.Category, f.Type, f.Amount, f.TotalWeight FROM trip INNER JOIN freight f ON f.Trip_TripID = TripID INNER JOIN train tr ON tr.TrainID = Train_TrainID INNER JOIN company c ON c.CompanyID = tr.Company_CompanyID WHERE ArrivalStation = 'Oulu'; HUOM! Jos haluaa tiet\u00e4\u00e4 mit\u00e4 rahtia on l\u00e4htenyt joltakin asemalta, pit\u00e4\u00e4 vain vaihtaa 'ArrivalStation' 'DepartingStation'.","title":"SQL kyselyt"}]}